import { type NextPage } from "next";
import Head from "next/head";
import { api } from "~/utils/api";

import InflationBarChart from "~/components/InflationBarChart";
import InflationAreaChart from "~/components/InflationAreaChart";

import Dropdown from "~/components/ui/Dropdown";

import Footer from "~/components/Footer";

import { useEffect, useRef, useState } from "react";

const data1 = [
  { name: "Core 4%", Percentage: 4 },
  { name: "Food 3%", Percentage: 3 },
  { name: "Rent 2%", Percentage: 2 },
];

const data2 = [
  { name: "Core 5%", Percentage: 5 },
  { name: "Food 6%", Percentage: 6 },
  { name: "Rent 7%", Percentage: 7 },
];

const data3 = [
  { name: "Core 8%", Percentage: 8 },
  { name: "Food 9%", Percentage: 9 },
  { name: "Rent 10%", Percentage: 10 },
];

interface CountryInflationCardProps {
  countryName: string;
  data: { name: string; Percentage: number }[];
}

const CountryInflationCard = ({
  countryName,
  data,
}: CountryInflationCardProps) => {
  return (
    <div className="mb-[50px] w-full sm:w-full md:w-1/2 md:px-3 lg:w-1/2 xl:w-1/3">
      <div className="rounded-3xl bg-neutral-50 pb-[70px] pt-[30px]">
        <div className="h-[300px] px-[10px] xl:w-[395px]">
          <InflationBarChart countryName={countryName} data={data} />
        </div>
      </div>
    </div>
  );
};

const ExchangeRateCard = ({}) => {
  return (
    <div className="mb-[50px] w-full sm:w-full md:w-1/2 md:px-3 lg:w-1/2 xl:w-1/3">
      <div className="rounded-3xl bg-neutral-50 pb-[70px] pt-[30px]">
        <div className="flex h-[80px] min-w-[371px] items-center justify-center px-[10px] xl:w-[395px]">
          <h3 className=" mt-[40px] text-[50px]">1.00 USD</h3>
        </div>
      </div>
    </div>
  );
};

const countries = ["China", "Japan", "South Korea"];

const Home: NextPage = () => {
  const elementRef = useRef<HTMLDivElement>(null);
  const [isSticky, setIsSticky] = useState(false);

  useEffect(() => {
    const handleScroll = () => {
      const element = elementRef.current;
      if (element) {
        const rect = element.getBoundingClientRect();
        const isTouchingTop = rect.top <= 0;
        setIsSticky(isTouchingTop);
      }
    };

    window.addEventListener("scroll", handleScroll);

    return () => {
      window.removeEventListener("scroll", handleScroll);
    };
  }, []);

  const hello = api.example.hello.useQuery({ text: "from tRPC" });

  // breakpoint values hardcoded due to issue with plugin AreaChart component not taking up full width on larger screen sizes
  const screenWidthBreakPoints =
    "w-full md:w-[736px] lg:w-[992px] xl:w-[1257px]";

  return (
    <>
      <Head>
        <title>US vs Asia Inflation</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#a5cefc] to-[#4377e8]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16">
          <h1
            className={`-mt-[20px] text-5xl font-extrabold tracking-tight text-blue-900 sm:text-[5rem] ${screenWidthBreakPoints} `}
          >
            US <span className="text-[#e14f4f]">vs</span> Asia Inflation
          </h1>

          {/* element acts as trigger to activate compare country component background color to workaround ios scroll issue when scroll up */}
          <div
            ref={elementRef}
            className={`mx-0 -mt-[30px] h-[1px] w-screen`}
          ></div>

          <div
            className={`sticky top-0 z-50 mx-0 -mt-[50px] h-[110px] w-screen ${
              isSticky ? "bg-blue-900 bg-opacity-60" : "bg-transparent"
            }`}
          ></div>

          <div
            className={`${screenWidthBreakPoints} sticky top-3 z-50 -mt-[145px] `}
          >
            <div
              className={`inline-flex ${screenWidthBreakPoints} -mb-[45px] -mt-[15px] justify-start md:ml-2 `}
            >
              <h3
                className={`text-2xl ${
                  isSticky ? "text-neutral-50" : "text-blue-900"
                }`}
              >
                Countries to compare
              </h3>
            </div>

            <div
              className={`inline-flex ${screenWidthBreakPoints} -mb-[20px] justify-start md:ml-0.5 `}
            >
              <Dropdown options={countries} initialSelectedItemIndex={0} />
              <Dropdown options={countries} initialSelectedItemIndex={1} />
            </div>
          </div>

          <div
            className={`inline-flex ${screenWidthBreakPoints} -mb-[35px] justify-start md:ml-4 `}
          >
            <h3 className="text-2xl text-blue-900">Jan 2023 - Jun 2023</h3>
          </div>

          <div className={`flex w-full ${screenWidthBreakPoints}`}>
            <div className=" w-full rounded-3xl bg-neutral-50 pb-[45px] md:mx-[12px]">
              <div className="my-[30px] h-[300px] px-[10px]">
                <InflationAreaChart />
              </div>
            </div>
          </div>

          <div
            className={`inline-flex ${screenWidthBreakPoints} -mb-[40px] -mt-[10px] justify-start md:ml-4 `}
          >
            <h3 className="text-2xl text-blue-900">Jun 2023</h3>
          </div>

          <div className="mt-[5px] flex flex-wrap">
            <CountryInflationCard countryName="United States" data={data1} />
            <CountryInflationCard countryName="United States" data={data2} />
            <CountryInflationCard countryName="United States" data={data3} />
          </div>

          <div
            className={`inline-flex ${screenWidthBreakPoints} -mb-[40px] -mt-[60px] justify-start md:ml-4 `}
          >
            <h3 className="text-2xl text-blue-900">Current Exchange Rate</h3>
          </div>

          <div className="mt-[5px] flex flex-wrap">
            <ExchangeRateCard />
            <ExchangeRateCard />
            <ExchangeRateCard />
          </div>

          <Footer />

          {/* <p className="mt-20 text-2xl text-neutral-50">
            {hello.data ? hello.data.greeting : "Loading tRPC query..."}
          </p> */}
        </div>
      </main>
    </>
  );
};

export default Home;
