import { type NextPage } from "next";
import Head from "next/head";
import { api } from "~/utils/api";

import Dropdown from "~/components/Dropdown";

import MonthlyCoreInflationCard from "~/components/monthly-core-inflation/MonthlyCoreInflationCard";
import CountryInflationCard from "~/components/country-inflation/CountryInflationCard";
import GasPriceCard from "~/components/gas-prices/GasPriceCard";

import Footer from "~/components/Footer";

import { useEffect, useRef, useState } from "react";

import { filterData } from "~/utils/datafilter";

import {
  getFirstDayOfSixMonthsAgo,
  getLastDayOfPreviousMonth,
  formatDateToMonthAndYear,
} from "~/utils/date";
import { type DataObject } from "~/Types/Data";

const data1 = [
  { name: "Core 4%", Percentage: 4 },
  { name: "Food 3%", Percentage: 3 },
];

const data2 = [
  { name: "Core 5%", Percentage: 5 },
  { name: "Food 6%", Percentage: 6 },
];

const data3 = [
  { name: "Core 8%", Percentage: 8 },
  { name: "Food 9%", Percentage: 9 },
];

const countries = ["Sweden", "Mexico", "Thailand"];
const categories = ["Core Inflation Rate", "Food Inflation", "Gasoline Prices"];

const Home: NextPage = () => {
  const elementRef = useRef<HTMLDivElement>(null);
  const [isSticky, setIsSticky] = useState(false);
  const [selectedCountries, setSelectedCountries] = useState([...countries]); //create a copy of countries array

  const [coreInflationData, setCoreInflationData] = useState<{
    [key: string]: DataObject[];
  }>({});

  const [foodInflationData, setFoodInflationData] = useState<{
    [key: string]: DataObject[];
  }>({});

  const [gasPricesData, setGasPricesData] = useState<{
    [key: string]: DataObject[];
  }>({});

  // start and end range of data to be fetched
  const rangeStart = getFirstDayOfSixMonthsAgo();
  console.log(rangeStart);
  const rangeEnd = getLastDayOfPreviousMonth();

  const { data, isLoading, error } = api.teRouter.getData.useQuery({
    country1: countries[0] || "",
    country2: countries[1] || "",
    country3: countries[2] || "",
    rangeStart,
    rangeEnd,
  });

  const [formattedData, setFormattedData] = useState(null);

  // handle sticker country selection bar when scroll
  useEffect(() => {
    const handleScroll = () => {
      const element = elementRef.current;
      if (element) {
        const rect = element.getBoundingClientRect();
        const isTouchingTop = rect.top <= 0;
        setIsSticky(isTouchingTop);
      }
    };

    window.addEventListener("scroll", handleScroll);

    return () => {
      window.removeEventListener("scroll", handleScroll);
    };
  }, []);

  // handle data changes
  useEffect(() => {
    if (data) {
      console.log("data changed", data);

      // set items from data
      setCoreInflationData(
        filterData(categories[0] || "", countries, data.data)
      );

      setFoodInflationData(
        filterData(categories[1] || "", countries, data.data)
      );

      setGasPricesData(filterData(categories[2] || "", countries, data.data));
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [data]);

  useEffect(() => {
    console.log("core inflation data", coreInflationData);
  }, [coreInflationData]);

  useEffect(() => {
    console.log("food inflation data", foodInflationData);
  }, [foodInflationData]);

  useEffect(() => {
    console.log("gas prices data", gasPricesData);
  }, [gasPricesData]);

  // handle select country dropdown changes
  useEffect(() => {
    console.log("selected countries changed", selectedCountries);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [selectedCountries]);

  // const hello = api.example.hello.useQuery({ text: "from tRPC" });
  // const test = api.test.displayTest.useQuery({ text: "from tRPC" });

  // breakpoint values hardcoded due to issue with plugin AreaChart component not taking up full width on larger screen sizes
  const screenWidthBreakPoints =
    "w-full md:w-[736px] lg:w-[992px] xl:w-[1257px]";

  return (
    <>
      <Head>
        <title>Country Inflation</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#a5cefc] to-[#4377e8]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16">
          <h1
            className={`-mt-[20px] text-5xl font-extrabold tracking-tight text-blue-900 sm:text-[5rem] ${screenWidthBreakPoints} `}
          >
            Country Inflation
          </h1>

          {/* element acts as trigger to activate compare country component background color to workaround ios scroll issue when scroll up */}
          <div
            ref={elementRef}
            className={`mx-0 -mt-[30px] h-[1px] w-screen`}
          ></div>

          <div
            className={`sticky top-0 z-50 mx-0 -mt-[50px] h-[110px] w-screen ${
              isSticky ? "bg-blue-900 bg-opacity-60" : "bg-transparent"
            }`}
          ></div>

          <div
            className={`${screenWidthBreakPoints} sticky top-3 z-50 -mt-[145px] `}
          >
            <div
              className={`inline-flex ${screenWidthBreakPoints} -mb-[45px] -mt-[15px] justify-start md:ml-2 `}
            >
              <h3
                className={`text-2xl ${
                  isSticky ? "text-neutral-50" : "text-blue-900"
                }`}
              >
                Countries to compare
              </h3>
            </div>

            <div
              className={`inline-flex ${screenWidthBreakPoints} -mb-[20px] justify-start md:ml-0.5 `}
            >
              <Dropdown
                key={"dropdown-0"}
                options={countries}
                selectedOptions={selectedCountries}
                setSelectedOptions={setSelectedCountries}
                index={0}
              />
              <Dropdown
                key={"dropdown-1"}
                options={countries}
                selectedOptions={selectedCountries}
                setSelectedOptions={setSelectedCountries}
                index={1}
              />
              <Dropdown
                key={"dropdown-2"}
                options={countries}
                selectedOptions={selectedCountries}
                setSelectedOptions={setSelectedCountries}
                index={2}
              />
            </div>
          </div>

          <div
            className={`inline-flex ${screenWidthBreakPoints} -mb-[35px] justify-start md:ml-4 `}
          >
            <h3 className="text-2xl text-blue-900">
              {formatDateToMonthAndYear(rangeStart)} -{" "}
              {formatDateToMonthAndYear(rangeEnd)}
            </h3>
          </div>

          <div className={`flex w-full ${screenWidthBreakPoints}`}>
            <MonthlyCoreInflationCard
              isLoading={isLoading}
              selectedCountries={selectedCountries}
              data={coreInflationData}
            />
          </div>

          <div
            className={`inline-flex ${screenWidthBreakPoints} -mb-[40px] -mt-[10px] justify-start md:ml-4 `}
          >
            <h3 className="text-2xl text-blue-900">
              {formatDateToMonthAndYear(rangeEnd)}
            </h3>
          </div>

          <div className="mt-[5px] flex flex-wrap">
            <CountryInflationCard countryName="United States" data={data1} />
            <CountryInflationCard countryName="United States" data={data2} />
            <CountryInflationCard countryName="United States" data={data3} />
          </div>

          <div
            className={`inline-flex ${screenWidthBreakPoints} -mb-[40px] -mt-[60px] justify-start md:ml-4 `}
          >
            <h3 className="text-2xl text-blue-900">Gas Prices</h3>
          </div>

          <div className="mt-[5px] flex flex-wrap">
            <GasPriceCard />
            <GasPriceCard />
            <GasPriceCard />
          </div>

          <Footer />

          {/* <p className="mt-20 text-2xl text-neutral-50">
            {hello.data ? hello.data.greeting : "Loading tRPC query..."}
          </p>
          <p className="mt-20 text-2xl text-neutral-50">
            {test.data ? test.data.display : "Loading tRPC query..."}
          </p> */}

          {/* <p className="mt-20 text-2xl text-neutral-50">
            {data ? JSON.stringify(data) : "Loading tRPC query..."}
          </p> */}
        </div>
      </main>
    </>
  );
};

export default Home;
